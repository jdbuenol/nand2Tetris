/**
 * 8-way demultiplexor:
 * if sel[0] == 1 and sel[1] == 1 and sel[2] == 1: a,b,c,d,e,f,g,h = 0,0,0,0,0,0,0,in
 * if sel[0] == 0 and sel[1] == 1 and sel[2] == 1: a,b,c,d,e,f,g,h = 0,0,0,0,0,0,in,0
 * if sel[0] == 1 and sel[1] == 0 and sel[2] == 1: a,b,c,d,e,f,g,h = 0,0,0,0,0,in,0,0
 * if sel[0] == 0 and sel[1] == 0 and sel[2] == 1: a,b,c,d,e,f,g,h = 0,0,0,0,in,0,0,0
 * if sel[0] == 1 and sel[1] == 1 and sel[2] == 0: a,b,c,d,e,f,g,h = 0,0,0,in,0,0,0,0
 * if sel[0] == 0 and sel[1] == 1 and sel[2] == 0: a,b,c,d,e,f,g,h = 0,0,in,0,0,0,0,0
 * if sel[0] == 1 and sel[1] == 0 and sel[2] == 0: a,b,c,d,e,f,g,h = 0,in,0,0,0,0,0,0
 * if sel[0] == 0 and sel[1] == 0 and sel[2] == 0: a,b,c,d,e,f,g,h = in,0,0,0,0,0,0,0
 */

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    DMux(in=in, sel=sel[0], a=d0, b=d1);
    DMux(in=d0, sel=sel[1], a=d2, b=d3);
    DMux(in=d1, sel=sel[1], a=d4, b=d5);
    DMux(in=d2, sel=sel[2], a=a, b=e);
    DMux(in=d3, sel=sel[2], a=c, b=g);
    DMux(in=d4, sel=sel[2], a=b, b=f);
    DMux(in=d5, sel=sel[2], a=d, b=h);
}